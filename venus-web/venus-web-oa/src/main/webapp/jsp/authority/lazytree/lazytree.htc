<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<public:component>
<public:attach event="ondocumentready" onevent="Init()" />
<public:attach event="onclick" onevent="MouseClick()" />
<public:attach event="ondblclick" onevent="MouseDblClick()" />

<public:attach event="onmouseover" onevent="MouseOver()" />
<public:attach event="onmouseout" onevent="MouseOut()" />
<public:attach event="onselectstart" onevent="SelectStart()"/>
<public:method name="PreLoad"/>
<public:method name="autoExpand"/>
<public:method name="ExpandObject"/>
<public:method name="getXmlDataIslandValue"/>
<public:method name="returnValueName"/>

<script language="javascript">

function SelectStart(){  //不允许选择
	window.event.cancelBubble=true;
	window.event.returnValue=false;
	return false;
}

var oCurrentNode=null;//高亮度显示时当前节点
var oTempClass=null;//定义鼠标样式的临时变量
var icon={ //定义节点显示的图片
	leaf:treeImagePath + "/ftv2link.gif",
	closeRoot:treeImagePath + "/diffFolder-0.gif",
	openRoot:treeImagePath + "/diffFolder.gif",
	closeParent:treeImagePath + "/ftv2folderclosed.gif",
	openParent:treeImagePath + "/ftv2folderopen.gif"	
} 
var Config={
	loading:"数据加载中...",  //加载时显示信息
	unavaible:"无相应数据！",  //加载失败时显示信息
	Service:rootXmlSource,  //节点数据文件
	SyncXSLsrc:xslPath,  //一次加载时xsl文件
	isExpandOne:expandType  //是否自动关闭兄弟节点
}
function PreLoad(iconIsString){  //预下载图片
	for(i in icon){
		var temp = iconIsString ? icon[i] : icon[i].src;
		icon[i]=new Image();
		icon[i].src=temp;
	}
	setTimeout("document.all('"+element.uniqueID+"').PreLoad()",10000)
}
PreLoad(true);

//加载xsl文件
var xsldoc=new ActiveXObject("Microsoft.XMLDOM");
xsldoc.async=false;
xsldoc.load(Config.SyncXSLsrc);

/**********************　开始deeptree的树展现相关方法 **********************/

function StateXML(state){  //显示加载的状态 (加载中或加载失败)
	var str="<message text='"+state+"'/>";
	var doc=new ActiveXObject("Microsoft.XMLDOM");
	doc.async=false;
	doc.loadXML(str);
	return doc.transformNode(xsldoc);
}

function Init(){  //加载初始化
	if(xmlSourceType == "nodeCode") {
		getXmlValue(element, Config.Service + defaultNodeCodeGetCurrent, false);
	} else {
		getXmlValue(element, Config.Service, false);
	}
}

function autoExpand(){  //自动展开
	var oRootNode = GetElement(element,"div");
	ExpandNode(oRootNode);
}

function ExpandObject() {
	var currentObject = getObjectById(currentObjectId_cookie);
	if(currentObject != null)
		ExpandNode(currentObject);
}

function getXmlValue(objContainer, xmlSource, isSelected, id, isAppand) {  //接受xmlSource异步，动态的加载数据，返回值，修正后
	var returnStr = "";
	var XmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
	if(!isAppand)
		objContainer.innerHTML = StateXML(Config.loading);
	objContainer.send="true";
	XmlHttp.onreadystatechange=function(){
		if(XmlHttp.readyState==4){
			if(XmlHttp.status==200){
				var Xmldoc=XmlHttp.responseXML;
				if(Xmldoc.documentElement.hasChildNodes()){
					if(isAppand) {
						objContainer.innerHTML += Xmldoc.transformNode(xsldoc);
					} else {
						objContainer.innerHTML = Xmldoc.transformNode(xsldoc);
					}
					addChildrenToId(Xmldoc, isSelected, id);
				}else{
					if(!isAppand) {
						objContainer.innerHTML = StateXML(Config.loading)
						//隐藏提示
						noTranslateParentToLeaf(objContainer);
					}
				}
			}else{
				if(!isAppand)
					objContainer.innerHTML = StateXML(Config.unavaible)
			}
		}
	}
	var targetUrl = xmlSource;
	if(xmlSourceType == "nodeCode") {  //如果传过来的xml数据获取方式为nodeCode，则加上默认xmlPath路径
		targetUrl = defaultXmlUrlPath + targetUrl;
	}
	try {
		XmlHttp.open("get",targetUrl ,false);
		XmlHttp.send();
	} catch(e) {
		alert(e.message);	
	}
}

function translateParentToLeaf(thisDiv) {  //把父节点变成叶子
	thisDiv.style.display = "none";
	var thisParent = thisDiv.previousSibling;
	if(thisParent == undefined || thisParent == null || thisParent.type != "parent") {
		return false;
	}
	thisParent.type = "leaf";
	var thisTreeImage = getObjectById(prefixTreeImg + thisParent.id.substring(prefixDiv.length));
	thisTreeImage.src = icon.leaf.src;
}

function noTranslateParentToLeaf(thisDiv) {  //不把父节点变成叶子
	thisDiv.style.display = "none";
	var thisParent = thisDiv.previousSibling;
	if(thisParent == undefined || thisParent == null || thisParent.type != "parent") {
		return false;
	}
	thisParent.type = "leaf";
	var thisTreeImage = getObjectById(prefixTreeImg + thisParent.id.substring(prefixDiv.length));
	thisTreeImage.src = icon.openRoot.src;
}

function getXmlDataIslandValue() {  //动态新增节点
	var currentObject = getObjectById(currentObjectId); //这句话得到的是当前的span
	if(currentObject == null)
		return false;
	var objContainer = currentObject.parentElement.parentElement;
	var isSelected = false;
	if(inputType == "checkbox") {
		isSelected = getObjectById(prefixCheckbox + gradeMapParent[currentObject.id.substring(prefixSpan.length)]).checked;	
	}
	var id = gradeMapParent[currentObject.id.substring(prefixSpan.length)];
	if(currentItem_Drag != null) {
		var objContainer = currentObject.parentElement;
		if(objContainer.hasChild == "1") {
			objContainer.nextSibling.insertAdjacentHTML("afterEnd", currentItem_Drag);
		} else {
			objContainer.insertAdjacentHTML("afterEnd", currentItem_Drag);
		}
		var thisMapId = _dt_itemMouseDown.downObject.id.substring(prefixSpan.length);
		var tempOldParent = gradeMapParent[thisMapId];
		var tempNewParent = gradeMapParent[objContainer.id.substring(prefixDiv.length)];
		gradeMapParent[thisMapId] = tempNewParent;
		if(gradeMapChild[tempNewParent] == undefined) {
			gradeMapChild[tempNewParent] = new Object();
		} 
		gradeMapChild[tempNewParent].push(thisMapId);
		gradeMapChild[tempOldParent] = getArrayDeleteString(gradeMapChild[tempOldParent], thisMapId);
	} else {
		var Xmldoc = getObjectById("xmlDataIsland");
		var tempDiv = window.document.createElement("div");
		tempDiv.innerHTML = Xmldoc.transformNode(xsldoc);
		tempDiv = tempDiv.childNodes[0];
		currentObject.parentElement.insertAdjacentElement("afterEnd", tempDiv);
		addChildrenToId(Xmldoc, isSelected, id);
	}
}

function getMoreTreeNode(thisSpan) {  //更多的展开节点
	var objDiv = thisSpan.parentElement;
	var objContainer = objDiv.parentElement;
	var xmlSource = thisSpan.xmlSource;
	var isSelected = false;
	if(inputType == "checkbox") {
		isSelected = getObjectById(prefixCheckbox + objDiv.parentElement.previousSibling.id.substring(prefixDiv.length)).checked;
	} 
	var id = objDiv.parentElement.previousSibling.id.substring(prefixDiv.length);
	objDiv.removeNode(true);
	getXmlValue(objContainer, xmlSource, isSelected, id, true);
}

function addChildrenToId(oXmlDoc, isSelected, parentId) {  //把取出的子节点加到当前节点的属性中
	if( oXmlDoc == null || oXmlDoc.documentElement == null) {
		return false;
	}
	var thisRoot = oXmlDoc.documentElement;  //取到根节点
	var cs = thisRoot.childNodes;  //取第二级子节点
	recursiveAddChildrenToId(cs, isSelected, parentId);
}

function recursiveAddChildrenToId(cs, isSelected, parentId) {
	var tempArrayString = new Array();
	var iXsltIndex = 1;
	for (var i = 0; i < cs.length; i++) {
		if (cs[i].tagName == prefixTreeNode) {  //注意：这里和xslt的规则绑死了, todo ，这里一定要改
			tempArrayString.push(cs[i].attributes[0].value + prefixConcat_xsltNumber + iXsltIndex);
			iXsltIndex ++;
		}
	}
	
	var tempParentId = prefixRootMapCode;
	if(parentId != undefined)
		tempParentId = parentId;
	var tempIndex = indexObject++;
	var tempParentIdOld = tempParentId;
	tempParentId = prefixConcat_index + tempIndex + tempParentId;
	for(var a=0; a<tempArrayString.length; a++) {
		var thisDiv = getObjectById(prefixDiv + tempArrayString[a]);;
		thisDiv.id = thisDiv.id + prefixConcat_parent + tempParentId;
		for(var b=0; b<thisDiv.children.length; b++) {
			var tempInnerObj = thisDiv.children[b];
			tempInnerObj.id = tempInnerObj.id + prefixConcat_parent + tempParentId;
		}
	}
	for(var i=0; i<tempArrayString.length; i++) {
		tempArrayString[i] += prefixConcat_parent + tempParentId;  //要把父节点id放在子节点后面保证全局唯一
		if(tempParentId == prefixConcat_index + tempIndex + prefixRootMapCode) {  //parentId未定义，说明正在处理根节点
			rootNode.push(tempArrayString[i] );  //设置rootNode
			gradeMapParent[tempArrayString[i]] = prefixRootMapCode;
		} else {
			gradeMapParent[tempArrayString[i]] = tempParentIdOld;;
		}
	}
	if(tempParentId == prefixConcat_index + tempIndex + prefixRootMapCode) {
		if(gradeMapChild[prefixRootMapCode] == undefined) {
			gradeMapChild[prefixRootMapCode] = new Array();		
		}
		for(var b=0; b<tempArrayString.length; b++) {
			gradeMapChild[prefixRootMapCode].push(tempArrayString[b]);
		}
	} else {
		if(gradeMapChild[tempParentIdOld] == undefined) {
			gradeMapChild[tempParentIdOld] = new Array();		
		}
		for(var b=0; b<tempArrayString.length; b++) {
			gradeMapChild[tempParentIdOld].push(tempArrayString[b]);
		}
	}
	
	//把子节点的checkbox定义为和父节点一样
	if(nodeRelationType == "hasRelation") {
		for(var i=0; i<tempArrayString.length; i++) {
			var tempCheckbox = getObjectById(prefixCheckbox + tempArrayString[i]);
			if(tempCheckbox != null) {
				tempCheckbox.checked = isSelected;
			}
		}
	}
	
	//递归处理
	var n=0;
	for(var m=0; m<cs.length; m++) {
		if(cs[m].tagName != prefixTreeNode) {
			continue;
		}
		if(cs[m].childNodes.length > 0) {
			recursiveAddChildrenToId(cs[m].childNodes, isSelected,  tempArrayString[n]);
		}
		n ++;
	}
}

function SelectNode(obj,open){  //选择节点，让节点高亮度显示
	var objNode=GetElement(obj,"span")
	var oLink=GetElement(objNode,"a")
	if(!oCurrentNode){
		oCurrentNode=objNode;
		objNode.className="HighLight";
	} else{
		oCurrentNode.className=oCurrentNode.type=="load"?"load":"";
		objNode.className="HighLight";
		oCurrentNode=objNode;
	}
	currentObjectId = objNode.id;  //放入全局变量中
	if(oLink!=null && open)
		window.open(oLink.href,oLink.target);
}



function GetElement(objParent, objTag){  //从objParent中得到类型为objTag的元素
	var objNode=null;
	if(objParent == null)
		return false;
	var oChildren=objParent.children;
	if(oChildren){
		for(i=0;i<oChildren.length;i++){
			if(oChildren[i].tagName.toUpperCase()==objTag.toUpperCase()){
				objNode=oChildren[i];
				break;
			}
		}
	}
	return objNode;
}

function Toggle(objNode){  //节点展开，或者收拢
	if(objNode.type=="parent"){
		if(objNode.open=="false") {
			ExpandNode(objNode);
			if(enableCookie)
				SetCookie(objNode.id.substring(prefixDiv.length), cookieEnable, exp);			
		} else {
			CollapseNode(objNode);
			if(enableCookie)
				DeleteCookie(objNode.id.substring(prefixDiv.length));		
		}
			
	}
}

function ExpandNode(objNode){  //展开节点
	if(objNode == null || objNode.type != "parent")
		return false;
	var oTreeImg=getObjectById(prefixTreeImg + objNode.id.substring(prefixDiv.length));
	var oSpan=getObjectById(prefixSpan + objNode.id.substring(prefixDiv.length));
	var oCheckbox=getObjectById(prefixCheckbox + objNode.id.substring(prefixDiv.length));
	var thisType = objNode.thisType;

	if(oTreeImg==null || oSpan==null)
		return false;
	var oChild=objNode.nextSibling;
	//根据节点类型(root,parent)区分打开节点的图片样式
	if (thisType == "root") {
		oTreeImg.src=icon.openRoot.src;
	} else {
		oTreeImg.src=icon.openParent.src;
	}
	oChild.style.display="block";
	objNode.open="true";
	objNode.opened="true";
	if(oCheckbox != null) {
		objNode.isSelected = oCheckbox.checked;
	}
	if(oChild.send=="false"){
		getXmlValue(oChild, objNode.xmlSource, objNode.isSelected, objNode.id.substring(prefixDiv.length))
	}
	if(Config.isExpandOne){
		var oContainer=objNode.parentElement;
		var oChildren=oContainer.children;
		for(i=0;i<oChildren.length;i++) {
			if(oChildren[i].open=="true" && oChildren[i]!=objNode) {
				CollapseNode(oChildren[i]);	
				if(enableCookie)	
					DeleteCookie(oChildren[i].id.substring(prefixDiv.length));
			}
		}	
	}
}

function CollapseNode(objNode) {  //收拢节点
	if(objNode == null || objNode.type != "parent")
		return;
	var oTreeImg=getObjectById(prefixTreeImg + objNode.id.substring(prefixDiv.length));
	var oSpan=getObjectById(prefixSpan + objNode.id.substring(prefixDiv.length));
	var oCheckbox=getObjectById(prefixCheckbox + objNode.id.substring(prefixDiv.length));
	var thisType = objNode.thisType;
	
	if(oTreeImg==null || oSpan==null)
		return false;
	var oChild=objNode.nextSibling;
	//根据节点类型(root,parent)区分收拢节点的图片样式
	if (thisType == "root") {
		oTreeImg.src=icon.closeRoot.src;
	} else {
		oTreeImg.src=icon.closeParent.src;
	}
	oChild.style.display="none";
	objNode.open="false";
	if(oCheckbox != null) {
		objNode.isSelected = oCheckbox.checked;
	}
}
/**********************　结束deeptree的树展现相关方法 **********************/

/**********************　开始监听事件相关方法 **********************/
function MouseClick(){  //鼠标事件定义
	var RealObj=window.event.srcElement
	if(RealObj.tagName.toUpperCase()=="A"){
		objSpan=RealObj.parentElement
		if(objSpan.type=="label"){
			RealObj.blur()
			var objNode=objSpan.parentElement
			SelectNode(objNode)
			Toggle(objNode)	
		}
	}
	else if(RealObj.type=="img" && RealObj.use=="tree"){
		var objNode=RealObj.parentElement;
		if(objNode){
			if(objNode.type=="leaf"){
				SelectNode(objNode,true)
			}
			else{
				Toggle(objNode)
			}
		}
	} else if(RealObj.type=="label" || RealObj.type=="load"){
		var objNode=RealObj.parentElement;
		SelectNode(objNode,true);
		Toggle(objNode);
	} else if(RealObj.type=="more"){
		getMoreTreeNode(RealObj);
	} else if(RealObj.type=="checkbox"){
		var objNode=RealObj.parentElement;
		objNode.isSelected = RealObj.checked; //将checkbox的状态给父容器对象
		//胡奇需求
		if(nodeRelationType == "hasRelation") {
			if(!arrayHasString(rootNode, RealObj.id.substring(prefixCheckbox.length))) {
				setParentState(RealObj.id);        //设置父节点的checkbox为不确定状态或者选或者不选
			}
			if(objNode.type=="parent"){
				if(objNode.opened=="true"){    //对于已经打开的，继续选择子节点
					checkChild(RealObj, gradeMapChild[RealObj.id.substring(prefixCheckbox.length)], objNode.isSelected);
				}
			}		
		}
		if(!RealObj.checked) {
			try {
				addRemoveIds(RealObj.value);
			}catch(e) {
			}
		}
	}
	if(typeof(toDoMouseClick) == "function") {
		toDoMouseClick(event);
	}
	return true;
}

function MouseDblClick(){  //双击事件
	var RealObj=window.event.srcElement
	if(RealObj.type=="label"||RealObj.type=="load"){
		var objNode=RealObj.parentElement;
		if(objNode.id!=""){
			window.returnValue = objNode.returnValue+","+objNode.text;
		}
	}
	if(outputType == "doubleClick") {
		window.close();
	}
	if(typeof(toDoMouseDbClick) == "function") {
		toDoMouseDbClick(event);
	}
	return true;
}

function MouseOver(){
	var RealObj=window.event.srcElement;
	if(RealObj.tagName.toUpperCase()=="A")
		RealObj=RealObj.parentElement;
	if(RealObj){
		if(RealObj.type=="label"||RealObj.type=="load"){
			oTempClass=RealObj.className;
			RealObj.className="MouseOver";
		}
	}
	if(typeof(toDoMouseOver) == "function") {
		toDoMouseOver(event);
	}
	return true;
}

function MouseOut(){
	var RealObj=window.event.srcElement;
	if(RealObj.tagName.toUpperCase()=="A")
		RealObj=RealObj.parentElement;
	if(RealObj){
		if(RealObj.type=="label"||RealObj.type=="load"){
			if(RealObj==oCurrentNode)
				RealObj.className="HighLight";
			else
				RealObj.className=oTempClass;
		}
	}
	if(typeof(toDoMouseOut) == "function") {
		toDoMouseOut(event);
	}
	return true;
}
/**********************　结束监听事件相关方法 **********************/

/**********************　开始checkbox状态维护提交方法 **********************/	
function checkChild(oChk,arrayOfStrings,state){  //check子节点的状态
	if(arrayOfStrings == undefined || arrayOfStrings == null)
		return false;
	for(var i=0;i<arrayOfStrings.length;i++){
		var obj = getObjectById(prefixCheckbox + arrayOfStrings[i]);
		if(obj != null) {
			obj.indeterminate = false;
			obj.checked = state;
		} else {
			continue;
		}			
		if(obj.parentElement.type=="parent" && obj.parentElement.opened=="true"){
			checkChild(obj,gradeMapChild[obj.id.substring(prefixCheckbox.length)], obj.checked);
		}
	}
}
	
function setParentState(checkboxid){  //设置父checkbox为不确定状态或者选或者不选, checkboxid是待处理节点id，父可能变灰、选、不选
	if(checkboxid == undefined || checkboxid == null)
		return false;
	var parentNode = null;
	var tempBrotherArray = null;
	var parentState = 30; //2,不选 3,不确定 5,选
	var tempState = null;
	if(!arrayHasString(rootNode, checkboxid.substring(prefixCheckbox.length))) {
		var thisObj = getObjectById(checkboxid);
		
		parentNode = gradeMapParent[checkboxid.substring(prefixCheckbox.length)];
		if(parentNode == undefined || parentNode == null)
		parentNode = eval("gradeMapParent['\"' + checkboxid + '\"']");
			
		tempBrotherArray = gradeMapChild[parentNode];
		if(tempBrotherArray == undefined || tempBrotherArray == null)
		tempBrotherArray = eval(gradeMapChild['"' + parentNode + '"']);
			
		for(var i=0; i<tempBrotherArray.length; i++) {
			var tempObj = getObjectById(prefixCheckbox + tempBrotherArray[i]);
			if((tempState != null && tempState != tempObj.checked) || (tempObj.indeterminate)) {
				parentState = 3;
			}
			tempState = tempObj.checked;
		}
		
		if(parentState != 3 && tempState != null && tempState == true) {
			parentState = 5;
		} else if(parentState != 3 && tempState != null && tempState == false) {
			parentState = 2;
		}
		
		if(parentState == 3) {
			getObjectById(prefixCheckbox + parentNode).checked = false;
			getObjectById(prefixCheckbox + parentNode).indeterminate = true;
			setState(prefixCheckbox + parentNode);
		} else if(parentState == 2) {
			getObjectById(prefixCheckbox + parentNode).indeterminate = false;
			getObjectById(prefixCheckbox + parentNode).checked = false;
			setParentState(prefixCheckbox + parentNode);
		} else if(parentState == 5) {
			getObjectById(prefixCheckbox + parentNode).indeterminate = false;
			getObjectById(prefixCheckbox + parentNode).checked = true;
			setParentState(prefixCheckbox + parentNode);
		}
	} else {
	}
}
	
function setState(checkboxid) {  //设置父checkbox为不确定状态, checkboxid是父节点id，保证变灰
	if(!arrayHasString(rootNode, checkboxid.substring(prefixCheckbox.length))) {
		var obj = getObjectById(checkboxid);
		obj.checked = false;
		obj.indeterminate = true;
		setState(prefixCheckbox + gradeMapParent[obj.id.substring(prefixCheckbox.length)]);			
	} else {
		var obj = getObjectById(checkboxid);
		obj.checked = false;
		obj.indeterminate = true;
	}
}
/**********************　结束checkbox状态维护提交方法 **********************/	


</script>
</public:component>
